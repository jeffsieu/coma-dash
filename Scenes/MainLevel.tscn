[gd_scene load_steps=18 format=2]

[ext_resource path="res://Scripts/Player.cs" type="Script" id=1]
[ext_resource path="res://Scripts/Generator/RoomGenerator.cs" type="Script" id=2]

[sub_resource type="CylinderMesh" id=1]

[sub_resource type="SpatialMaterial" id=2]
albedo_color = Color( 1, 0.0117647, 0.0117647, 1 )

[sub_resource type="PrismMesh" id=3]
size = Vector3( 2, 7.39, 2 )

[sub_resource type="SpatialMaterial" id=4]
flags_transparent = true
albedo_color = Color( 1, 1, 1, 0.501961 )

[sub_resource type="CylinderMesh" id=5]

[sub_resource type="SpatialMaterial" id=6]
albedo_color = Color( 0.384314, 0.384314, 0.384314, 1 )

[sub_resource type="CylinderShape" id=7]

[sub_resource type="PlaneMesh" id=8]
subdivide_width = 4

[sub_resource type="BoxShape" id=9]

[sub_resource type="SpatialMaterial" id=10]
albedo_color = Color( 0.878431, 0.313726, 0.313726, 1 )

[sub_resource type="SpatialMaterial" id=11]
albedo_color = Color( 0.764706, 0.47451, 0.137255, 1 )

[sub_resource type="SpatialMaterial" id=12]
albedo_color = Color( 0.12549, 0.0823529, 0.00784314, 1 )

[sub_resource type="PlaneMesh" id=13]
size = Vector2( 500, 500 )
subdivide_width = 100
subdivide_depth = 100

[sub_resource type="Shader" id=14]
code = "shader_type spatial;
//render_mode unshaded;

uniform float dims = 500.0f;
uniform float height_scale = 10.0f;

float hash(vec2 p) {
	return fract(sin(dot(p * 17.17, vec2(14.91, 67.31))) * 4791.9511);
}

float noise(vec2 x) {
	vec2 p = floor(x);
	vec2 f = fract(x);
	f = f * f * (3.0 - 2.0 * f);
	vec2 a = vec2(1.0, 0.0);
	return mix(mix(hash(p + a.yy), hash(p + a.xy), f.x),
			mix(hash(p + a.yx), hash(p + a.xx), f.x), f.y);
}

float fbm(vec2 x) {
	float height = 0.0;
	float amplitude = 0.5;
	float frequency = 3.0;
	for (int i = 0; i < 6; i++){
		height += noise(x * frequency) * amplitude;
		amplitude *= 0.5;
		frequency *= 2.0;
	}
	return height;
}

float get_height(vec2 uv) {
	float freq = 5.0f;
	float height = fbm(uv * freq) * height_scale;
	height = height * (abs(uv.x - 0.5) + abs(uv.y - 0.5));
	return height;
}

void vertex() {
	float freq = 1.0f;
	float height = get_height(UV);
	VERTEX.y += height;
	COLOR.xyz = vec3(height) / height_scale;
	vec2 e = vec2(0.01, 0.0);
	vec3 normal = normalize(
		vec3(
			get_height(UV - e) - get_height(UV + e), 
			2.0 * e.x, 
			get_height(UV - e.yx) - get_height(UV + e.yx)));
	NORMAL = normal;
}

void fragment() {
	ALBEDO = COLOR.xyz;
}
"

[sub_resource type="ShaderMaterial" id=15]
shader = SubResource( 14 )
shader_param/dims = 500.0
shader_param/height_scale = 200.0

[node name="Spatial" type="Spatial"]

[node name="Camera" type="Camera" parent="."]
transform = Transform( 1, 0, 0, 0, 0.939692, 0.34202, 0, -0.34202, 0.939692, 0, 10, 20 )
far = 1000.0

[node name="Player" type="KinematicBody" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2, 0 )
script = ExtResource( 1 )

[node name="CSGMesh" type="CSGMesh" parent="Player"]
mesh = SubResource( 1 )
material = SubResource( 2 )

[node name="Aiming" type="Spatial" parent="Player"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1, 0 )

[node name="ArcIndicator" type="CSGMesh" parent="Player/Aiming"]
transform = Transform( -1.00011, -1.27101e-07, 4.17653e-07, 1.62938e-07, 1.03537e-14, 2.56354, -3.25876e-07, 0.390071, 6.80443e-14, 0, 0.297, -1.40811 )
mesh = SubResource( 3 )
material = SubResource( 4 )

[node name="RangeIndicator" type="CSGMesh" parent="Player/Aiming"]
transform = Transform( 3, 0, 0, 0, 0.033, 0, 0, 0, 3, 0, 0, 0 )
mesh = SubResource( 5 )
material = SubResource( 6 )

[node name="CollisionShape" type="CollisionShape" parent="Player"]
shape = SubResource( 7 )

[node name="Floor" type="StaticBody" parent="."]
transform = Transform( 100, 0, 0, 0, 1, 0, 0, 0, 100, 0, -2, 0 )

[node name="CSGMesh" type="CSGMesh" parent="Floor"]
mesh = SubResource( 8 )

[node name="CollisionShape" type="CollisionShape" parent="Floor"]
shape = SubResource( 9 )

[node name="RoomGenerator" type="Spatial" parent="."]
script = ExtResource( 2 )
RoomSize = Vector2( 50, 40 )
WallThickness = 2.0
TileSize = Vector3( 2, 0.2, 5 )
TileOffset = 0.5
TileSpacing = 0.25
WallMaterial = SubResource( 10 )
TileMaterial = SubResource( 11 )
GroutMaterial = SubResource( 12 )

[node name="DirectionalLight" type="DirectionalLight" parent="."]
transform = Transform( -0.610236, 0.364093, -0.703596, -0.784335, -0.152673, 0.601257, 0.111494, 0.918764, 0.378737, -39.473, 143.462, 167.515 )
shadow_enabled = true
directional_shadow_max_distance = 8192.0

[node name="Terrain" type="MeshInstance" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -30, 0 )
mesh = SubResource( 13 )
material/0 = SubResource( 15 )
